{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","registerServiceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.006f1a93.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Titles = () => (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\n\t\t\t\t\n\t\t\t</div>\n\t\t);\n\nexport default Titles; ","import React from \"react\";\n\nconst Form = props => (\n\t\t\t<form onSubmit={props.getWeather}>\n\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\" />\n\t\t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n\t\t\t\t<button>Get Weather</button>\n\t\t\t</form>\n\t\t);\n\n\nexport default Form;","import React from \"react\";\n\n\n\nconst Weather = props => (\n\t\t\t<div className=\"weather__info\">\n\t\t\t{ \n\t\t\tprops.city && props.country && <p className=\"weather__key\">Location:\n\t\t\t\t <span className=\"weather__value\"> { props.city}, {props.country}</span>\n\t\t\t\t</p>\n\t\t\t}\n\t\t\t{ \n\t\t\tprops.temperature && <p className=\"weather__key\">Temperature: \n\t\t\t\t<span className=\"weather__value\"> { props.temperature}</span>\n\t\t\t\t</p>\n\t\t\t}\n\t\t\t{ \n\t\t\tprops.humidity && <p className=\"weather__key\">Humidity: \n\t\t\t\t<span className=\"weather__value\"> { props.humidity}</span>\n\t\t\t\t</p>\n\t\t\t}\n\t\t\t{ \n\t\t\tprops.description && <p className=\"weather__key\">Conditions: \n\t\t\t\t<span className=\"weather__value\"> { props.description }</span> \n\t\t\t\t</p>\n\t\t\t}\n\t\t\t{ \n\t\t\tprops.error && <p className=\"weather__error\">{ props.error}</p>\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\n\n\nexport default Weather;","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_KEY = \"1ea5a3b6f3e4709ee6813099e53121aa\";\r\n    \r\nclass App extends React.Component {\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n\r\n    }\r\n    getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const country= e.target.elements.country.value;\r\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n        const data = await api_call.json();\r\n        if (city && country) { \r\n                this.setState({\r\n                        temperature: data.main.temp,\r\n                        city: data.name,\r\n                        country: data.sys.country,\r\n                        humidity: data.main.humidity,\r\n                        description: data.weather[0].description,\r\n                        error: \"\"\r\n        });\r\n    } else{\r\n        this.setState({\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: \"Please enter value.\"\r\n        });\r\n    }\r\n}\r\n    render() {\r\n        return(\r\n            <div>\r\n               <div className=\"wrapper\">\r\n                   <div className=\"main\">\r\n                       <div className=\"container\">\r\n                           <div className=\"row\">\r\n                               <div className=\"col-xs-5 title-container\">\r\n                               <Titles />\r\n                               </div>\r\n                               <div className=\"col-xs-7 form-container\">\r\n                                   <Form getWeather={this.getWeather}/>\r\n                                   <Weather \r\n                                    temperature={this.state.temperature}\r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    humidity={this.state.humidity}\r\n                                    description={this.state.description}\r\n                                    error={this.state.error}\r\n                                    />\r\n                               </div>\r\n                           </div>\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n            />\r\n            </div>\r\n        );\r\n     }\r\n};\r\n\r\n              \r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App.js';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}